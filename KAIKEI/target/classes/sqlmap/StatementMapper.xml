<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ts.kaikei.dao.StatementDAO">

<<<<<<< HEAD
    <select id="getStatementList" parameterType="String" resultType="StatementListVO">
    
    	SELECT STT.account_cd, ACC.title, STT.customer_cd, STT.date, 
    			STT.classify, STT.debtor, STT.creditor, STT.abs
    	FROM statements AS STT, account AS ACC
    	WHERE 1=1
    	AND STT.company_cd = #{company_cd}
    	AND STT.account_cd = ACC.acc_cd

    </select>
    
    <insert id="addStatement" parameterType="StatementVO" >
    
        INSERT INTO statements
        VALUES(
        #{company_cd}, nextval('seq_company_${company_cd}'), #{account_cd}, 
        #{customer_cd}, to_date(#{date},'YYYY-MM-DD'), #{classify}, 
        #{debtor}, #{creditor}, #{abs}, 
        #{ent_id}, NOW(), #{ent_prog},
        #{mod_id}, NOW(), #{mod_prog})
        
    </insert>
    
    <select id="getPageSize" parameterType="String" resultType="String">
    	SELECT COUNT(*) FROM statements as s
    	WHERE s.company_cd = #{company_cd}
    </select>
    
    
    <update id="editStatement" parameterType="StatementVO">
    
    	UPDATE statement
    	SET account_cd = #{account_cd}, customer_cd = #{customer_cd}, date = #{date}, classify = #{classify}, debtor = #{debtor}, creditor = #{creditor}, abs = #{abs}
    	WHERE 1=1
        AND company_cd = #{company_cd}
        AND seq = #{seq}
    
=======
    <select id="selectStatementList" parameterType="Map" resultType="StatementListVO">
    
    	SELECT 
    		seq,
    		TO_CHAR(STT.date, 'YY') AS year, 
    		TO_CHAR(STT.date, 'MM') AS month, 
    		TO_CHAR(STT.date, 'DD') AS date,
    		STT.account_cd, 
    		ACC.title as acc_title, 
    		STT.customer_cd, 
    		CUS.title as cus_title,
    		STT.classify, 
    		STT.debtor, 
    		STT.creditor, 
    		STT.abs,
    		STT.mod_date
    	FROM 
    		statements AS STT, 
    		account AS ACC, 
    		customer AS CUS
    	WHERE 1=1
	    	AND STT.company_cd = #{company_cd}
	    	AND STT.date <![CDATA[>=]]> '2019-11-01' 
	    	AND STT.date <![CDATA[<]]> '2019-12-31'
	    	AND STT.company_cd = CUS.company_cd
	    	AND STT.customer_cd = CUS.cus_cd
	    	AND STT.account_cd = ACC.acc_cd
		ORDER BY SEQ ASC

		
    </select>
    
    <update id="saveStatement" parameterType="Map">
    
    	<foreach collection="statementList" item="item" separator=";">
    		<choose>
	    		<when test="item.state == 'insert'">
			        INSERT INTO 
			        	statements (
				        	company_cd,
				        	seq,
				        	account_cd,
				        	customer_cd,
				        	date,
				        	classify,
				        	debtor,
				        	creditor,
				        	abs,
				        	ent_id,
				        	ent_date,
				        	ent_prog,
				        	mod_id,
				        	mod_date,
				        	mod_prog
				        )
				        VALUES
				       
				        (
				        	#{item.company_cd}, 
				        	nextval('seq_company_${item.company_cd}'), 
				        	#{item.account_cd}, 
				        	#{item.customer_cd}, 
				        	#{item.date}::DATE, 
				        	#{item.classify}, 
				        	#{item.debtor}::INTEGER, 
				        	#{item.creditor}::INTEGER, 
				        	#{item.abs}, 
				       		#{item.ent_id}, 
				       		NOW(), 
				       		'Web-kaikei', 
				        	#{item.mod_id}, 
				        	NOW(), 
				        	'Web-kaikei'
				        )
				</when>
				
				<when test="item.state == 'update'">
						UPDATE
				        	statements
				        SET
				        	account_cd = #{item.account_cd},
				        	customer_cd = #{item.customer_cd}, 
				        	date = #{item.date}::DATE, 
				        	classify = #{item.classify}, 
				        	debtor = #{item.debtor}::INTEGER, 
				        	creditor = #{item.creditor}::INTEGER, 
				        	abs = #{item.abs}, 
				        	mod_id = #{item.mod_id}, 
				        	mod_date = NOW(),
				        	mod_prog = 'Web-kaikei'
				        WHERE 1=1
				        	AND company_cd = #{item.company_cd}
				        	AND seq = #{item.seq}::INTEGER
				</when>
				
				<when test="item.state == 'delete'">
			        	DELETE FROM
			        		statements
			        	WHERE 1=1
				        	AND company_cd = #{item.company_cd}
				        	AND seq = #{item.seq}::INTEGER
				</when>
				
				<otherwise>
				</otherwise>
     		</choose>
     	</foreach>
     	
>>>>>>> 7eeec0605048579796358e5543e11b12c7614d68
    </update>

</mapper>