<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ts.kaikei.dao.StatementDAO">

    <select id="selectStatementList" parameterType="Map" resultType="StatementListVO">
    
    	SELECT 
    		seq,
    		TO_CHAR(STT.date, 'YY') AS year, 
    		TO_CHAR(STT.date, 'MM') AS month, 
    		TO_CHAR(STT.date, 'DD') AS date,
    		STT.account_cd, 
    		ACC.title as acc_title, 
    		STT.customer_cd, 
    		CUS.title as cus_title,
    		STT.classify, 
    		STT.debtor, 
    		STT.creditor, 
    		STT.abs,
    		STT.mod_date
    	FROM 
    		statements AS STT, 
    		account AS ACC, 
    		customer AS CUS
    	WHERE 1=1
	    	AND STT.company_cd = #{company_cd}
	    	AND STT.date <![CDATA[>=]]> '2019-11-01' 
	    	AND STT.date <![CDATA[<]]> '2019-12-31'
	    	AND STT.company_cd = CUS.company_cd
	    	AND STT.customer_cd = CUS.cus_cd
	    	AND STT.account_cd = ACC.acc_cd
		ORDER BY SEQ ASC
		
    </select>
    
    <update id="saveStatement" parameterType="Map">
    
    	<foreach collection="statementList" item="item" separator=";">
    		<choose>
	    		<when test="item.state == 'insert'">
			        INSERT INTO 
			        	statements (
				        	company_cd,
				        	seq,
				        	account_cd,
				        	customer_cd,
				        	date,
				        	classify,
				        	debtor,
				        	creditor,
				        	abs,
				        	ent_id,
				        	ent_date,
				        	ent_prog,
				        	mod_id,
				        	mod_date,
				        	mod_prog
				        )
				        VALUES
				       
				        (
				        	#{item.company_cd}, 
				        	nextval('seq_company_${item.company_cd}'), 
				        	#{item.account_cd}, 
				        	#{item.customer_cd}, 
				        	#{item.date}::DATE, 
				        	#{item.classify}, 
				        	#{item.debtor}::INTEGER, 
				        	#{item.creditor}::INTEGER, 
				        	#{item.abs}, 
				       		#{item.ent_id}, 
				       		NOW(), 
				       		'Web-kaikei', 
				        	#{item.mod_id}, 
				        	NOW(), 
				        	'Web-kaikei'
				        )
				</when>
				
				<when test="item.state == 'update'">
						UPDATE
				        	statements
				        SET
				        	account_cd = #{item.account_cd},
				        	customer_cd = #{item.customer_cd}, 
				        	date = #{item.date}::DATE, 
				        	classify = #{item.classify}, 
				        	debtor = #{item.debtor}::INTEGER, 
				        	creditor = #{item.creditor}::INTEGER, 
				        	abs = #{item.abs}, 
				        	mod_id = #{item.mod_id}, 
				        	mod_date = NOW(),
				        	mod_prog = 'Web-kaikei'
				        WHERE 1=1
				        	AND company_cd = #{item.company_cd}
				        	AND seq = #{item.seq}::INTEGER
				</when>
				
				<when test="item.state == 'delete'">
			        	DELETE FROM
			        		statements
			        	WHERE 1=1
				        	AND company_cd = #{item.company_cd}
				        	AND seq = #{item.seq}::INTEGER
				</when>
				
				<otherwise>
				</otherwise>
     		</choose>
     	</foreach>
     	
    </update>
    

    <select id="getStatementList" resultType="StatementVO">
    
    	SELECT 
    		*
    	FROM 
    		statements AS STT
    	WHERE 1=1
	    	AND STT.company_cd = '00001'
	    	AND STT.date <![CDATA[>=]]> '2019-11-01' 
	    	AND STT.date <![CDATA[<]]> '2019-12-31'
		ORDER BY SEQ ASC
		
    </select>

    <!-- COMPANY DELETE MANAGE in statements -->
    <delete id="stateCompanyDelete" parameterType="String">
	    DELETE FROM statements
	    WHERE company_cd = #{company_cd}
    </delete>
    
    <!-- Change Company Code in statements -->
	<update id="companyCodeCh_std" parameterType="hashmap">
		UPDATE statements
    	SET 
    		company_cd = #{new},
    		mod_id = 'Admin',
    		mod_date = (SELECT CURRENT_DATE),
    		mod_prog = 'Web-kaikei'
    	WHERE 1=1
    		AND	company_cd = #{org}
	</update>
	
	<!-- Report General Ledger List Select -->
	<select id="GeneralLedgerList" parameterType="hashmap" resultType="ReportGlVO">
		SELECT
			STT.account_cd,
			CASE WHEN STT.account_cd = ACC.acc_cd 
				THEN ACC.title END AS ACC_TITLE,
			EXTRACT(MONTH FROM STT.date) AS MONTH,
			COUNT(*) AS COUNT_TOTAL,
			SUM(STT.creditor) AS SUM_CRED,
			SUM(STT.debtor) AS SUM_DEB,
			SUM(STT.debtor)-SUM(STT.creditor) AS BALANCE,
			TEXT(EXTRACT(QUARTER FROM STT.date)) AS QUARTER,
			TEXT(EXTRACT(YEAR FROM STT.date)) AS YEAR
			
		FROM statements STT, account ACC
			
		WHERE 1=1
		AND TEXT(EXTRACT(QUARTER FROM STT.date)) = #{QUARTER}
		AND TEXT(EXTRACT(YEAR FROM STT.date)) = #{YEAR}
		AND STT.company_cd = #{company_cd}
		AND ACC.acc_cd = STT.account_cd
			
		GROUP BY 
			MONTH,
			STT.account_cd,
			ACC.acc_cd,
			ACC.title,
			QUARTER,
			YEAR
			
		ORDER BY STT.account_cd
	</select>
	
	<!-- Report General Ledger List Select find forward balance -->
	<select id="Forward_balance" parameterType="hashmap" resultType="ReportGlVO">
		SELECT
			STT.account_cd,
			CASE WHEN STT.account_cd = ACC.acc_cd THEN ACC.title END AS ACC_TITLE,
			SUM(STT.debtor) - SUM(STT.creditor) AS BALANCE
			
		FROM statements STT, account ACC
			
		WHERE 1=1
		<choose>
			<when test="QUARTER == 1">
				AND EXTRACT(QUARTER FROM STT.date) = '4'
				AND EXTRACT(YEAR FROM STT.date) = ${YEAR} - 1
			</when>
			<when test="QUARTER != 1">
				AND EXTRACT(QUARTER FROM STT.date) = ${QUARTER} -1
				AND EXTRACT(YEAR FROM STT.date) = ${YEAR}
			</when>
		</choose>
		
		AND STT.company_cd = #{company_cd}
		AND ACC.acc_cd = STT.account_cd
			
		GROUP BY 
			STT.account_cd,
			ACC.acc_cd,
			ACC.title
			
		ORDER BY STT.account_cd
	</select>
	
	<!-- Report General Ledger List Select find account title list -->
	<select id="Account_title" parameterType="String" resultType="AccountVO">
		SELECT
			STT.account_cd AS acc_cd,
			CASE WHEN STT.account_cd = ACC.acc_cd 
				THEN ACC.title END AS title
			
		FROM statements STT, account ACC
			
		WHERE 1=1
			AND STT.company_cd = #{company_cd}
			AND ACC.acc_cd = STT.account_cd
			
		GROUP BY 
			STT.account_cd,
			ACC.acc_cd,
			ACC.title
			
		ORDER BY STT.account_cd
	</select>

</mapper>